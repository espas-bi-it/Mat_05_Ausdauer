using System.Collections;
using System.Collections.Generic;
using TMPro;
using UnityEngine;

public class TaskManager : MonoBehaviour
{
    // we dont talk about this 
    int[,] matrix = {
    {2, 5, 3, 7, 5, 4, 8, 4, 3, 1, 6, 6, 5, 7, 1, 7, 5, 3, 9, 0},
    {2, 6, 8, 5, 6, 1, 1, 6, 7, 8, 5, 4, 4, 5, 7, 2, 7, 8, 3, 5},
    {5, 5, 8, 9, 7, 3, 7, 3, 3, 6, 6, 2, 3, 6, 8, 5, 7, 5, 3, 3},
    {2, 7, 3, 2, 6, 1, 6, 8, 8, 5, 8, 4, 9, 0, 0, 2, 7, 5, 0, 8},
    {9, 2, 7, 0, 6, 5, 8, 2, 1, 2, 5, 5, 6, 7, 5, 7, 8, 0, 4, 2},
    {9, 8, 6, 4, 1, 7, 4, 7, 4, 6, 9, 3, 6, 3, 4, 7, 8, 3, 0, 0},
    {0, 0, 0, 0, 1, 4, 4, 5, 1, 6, 1, 9, 2, 2, 0, 5, 1, 1, 3, 2},
    {5, 5, 8, 9, 7, 3, 7, 3, 3, 6, 6, 2, 3, 6, 8, 5, 7, 5, 3, 3},
    {1, 9, 9, 7, 3, 8, 9, 1, 5, 3, 2, 5, 8, 0, 1, 6, 3, 1, 0, 7},
    {4, 5, 3, 6, 0, 0, 0, 8, 5, 5, 7, 0, 8, 7, 4, 2, 0, 5, 1, 8},
    {5, 8, 0, 2, 4, 6, 8, 3, 2, 6, 2, 3, 4, 5, 3, 4, 1, 9, 5, 6},
    {1, 9, 6, 2, 4, 1, 3, 0, 1, 4, 6, 0, 0, 4, 5, 0, 3, 1, 4, 2},
    {5, 9, 5, 1, 8, 2, 9, 0, 7, 6, 3, 2, 7, 6, 3, 5, 3, 3, 6, 5},
    {6, 7, 5, 5, 6, 8, 0, 7, 6, 1, 8, 3, 8, 7, 3, 7, 6, 0, 4, 3},
    {2, 6, 8, 0, 1, 9, 6, 0, 4, 4, 8, 9, 3, 7, 5, 6, 6, 0, 5, 0},
    {2, 7, 3, 2, 6, 1, 6, 8, 8, 5, 8, 4, 9, 0, 0, 2, 7, 5, 0, 8},
    {5, 0, 8, 7, 4, 0, 0, 0, 5, 8, 4, 9, 0, 3, 6, 6, 5, 9, 2, 2},
    {3, 5, 0, 3, 0, 0, 1, 8, 9, 2, 0, 0, 6, 9, 3, 3, 5, 6, 3, 4},
    {8, 8, 4, 6, 6, 4, 1, 0, 0, 4, 5, 0, 0, 8, 0, 2, 4, 6, 1, 5},
    {1, 9, 7, 6, 6, 4, 9, 7, 4, 4, 0, 1, 3, 0, 1, 4, 6, 8, 0, 8},
    {7, 3, 8, 3, 9, 3, 4, 5, 2, 6, 6, 2, 0, 6, 6, 4, 4, 1, 2, 2},
    {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9},
    {1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0},
    {2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1},
    {3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2},
    {4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3},
    {5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4},
    {6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5},
    {7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6},
    {8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7},
    {9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8},
    {9, 5, 7, 9, 2, 3, 4, 1, 0, 5, 6, 6, 8, 9, 2, 2, 3, 6, 0, 1},
    {1, 0, 0, 7, 5, 2, 4, 7, 4, 4, 2, 7, 7, 4, 1, 1, 1, 8, 5, 2},
    {5, 5, 2, 4, 6, 2, 4, 3, 1, 9, 1, 8, 8, 5, 1, 9, 0, 6, 8, 0},
    {7, 7, 8, 3, 7, 4, 5, 8, 6, 8, 5, 3, 9, 7, 2, 5, 9, 8, 7, 3},
    {2, 0, 5, 1, 7, 5, 9, 6, 8, 5, 4, 0, 3, 3, 0, 8, 5, 8, 9, 0},
    {9, 0, 8, 3, 6, 6, 5, 5, 7, 0, 6, 0, 4, 0, 9, 9, 2, 8, 8, 5},
    {5, 9, 5, 2, 0, 8, 7, 2, 4, 6, 1, 4, 1, 8, 5, 9, 0, 5, 0, 4},
    {2, 1, 9, 6, 3, 5, 7, 9, 7, 2, 8, 4, 8, 2, 0, 6, 1, 5, 2, 6},
    {9, 7, 6, 5, 3, 1, 1, 8, 3, 8, 4, 9, 7, 0, 7, 3, 3, 3, 4, 9},
    {4, 9, 0, 6, 0, 1, 8, 0, 9, 9, 0, 7, 6, 5, 3, 1, 1, 8, 3, 9},
    {6, 7, 5, 5, 6, 8, 0, 7, 6, 1, 8, 3, 8, 7, 3, 7, 6, 0, 4, 3},
    {1, 7, 9, 4, 9, 7, 7, 5, 3, 0, 8, 7, 9, 8, 1, 0, 5, 3, 3, 6},
    {0, 7, 0, 8, 0, 3, 0, 9, 1, 1, 4, 2, 4, 8, 5, 7, 1, 4, 6, 6},
    {0, 8, 8, 6, 5, 5, 3, 3, 9, 8, 0, 4, 8, 6, 7, 6, 4, 4, 1, 1},
    {7, 3, 3, 5, 8, 5, 3, 7, 9, 8, 3, 0, 4, 2, 5, 4, 3, 6, 6, 2},
    {5, 7, 6, 9, 6, 7, 6, 4, 0, 5, 3, 3, 3, 4, 9, 1, 0, 9, 4, 7},
    {2, 4, 6, 4, 8, 0, 5, 2, 6, 8, 1, 5, 1, 3, 6, 7, 7, 4, 8, 2},
    {4, 5, 5, 3, 3, 8, 6, 5, 0, 9, 0, 2, 0, 1, 8, 5, 5, 5, 1, 0},
    {7, 8, 5, 3, 7, 1, 8, 3, 4, 7, 9, 4, 7, 0, 4, 5, 4, 6, 6, 6},
    {4, 6, 7, 6, 4, 0, 4, 1, 8, 9, 0, 2, 0, 0, 0, 1, 8, 3, 4, 1},
    {4, 8, 0, 5, 2, 0, 0, 8, 5, 7, 9, 4, 7, 9, 5, 9, 5, 1, 8, 8},
    {2, 6, 6, 9, 8, 3, 0, 6, 1, 2, 9, 0, 6, 6, 0, 1, 4, 2, 4, 9},
    {7, 5, 0, 0, 5, 3, 3, 8, 6, 5, 2, 7, 5, 0, 5, 8, 0, 4, 8, 6},
    {7, 3, 4, 7, 9, 4, 3, 2, 3, 2, 6, 7, 8, 8, 6, 8, 3, 0, 4, 7},
    {4, 9, 0, 2, 0, 4, 8, 5, 3, 7, 1, 9, 0, 2, 0, 1, 8, 5, 2, 0},
    {1, 7, 9, 4, 7, 8, 6, 7, 6, 4, 4, 7, 9, 4, 7, 0, 4, 5, 4, 0},
    {1, 2, 9, 0, 6, 4, 2, 5, 4, 2, 1, 1, 3, 5, 0, 6, 1, 1, 4, 4},
    {1, 5, 2, 7, 5, 3, 4, 9, 1, 0, 0, 9, 0, 2, 1, 1, 3, 5, 0, 6},
    {8, 9, 8, 0, 4, 8, 6, 7, 6, 4, 4, 1, 1, 7, 0, 9, 0, 2, 4, 5},
    {5, 8, 8, 3, 0, 4, 2, 5, 4, 2, 6, 7, 8, 4, 3, 2, 8, 2, 6, 9},
    {5, 3, 5, 3, 3, 3, 4, 9, 1, 0, 9, 6, 3, 7, 3, 0, 0, 1, 4, 7},
    {2, 7, 5, 6, 3, 8, 7, 4, 5, 5, 4, 7, 8, 9, 4, 6, 3, 1, 1, 6},
    {9, 5, 2, 5, 7, 2, 0, 1, 6, 0, 5, 1, 8, 5, 2, 1, 1, 6, 2, 6},
    {5, 5, 0, 1, 4, 1, 7, 7, 8, 4, 3, 9, 7, 0, 1, 8, 3, 4, 1, 5},
    {7, 2, 5, 5, 6, 1, 3, 6, 3, 7, 3, 0, 0, 5, 9, 3, 2, 8, 7, 5},
    {9, 4, 1, 4, 5, 5, 4, 7, 8, 9, 4, 3, 8, 0, 1, 4, 5, 3, 3, 2},
    {2, 6, 7, 3, 3, 3, 2, 9, 6, 8, 1, 5, 6, 5, 8, 0, 8, 1, 5, 6},
    {3, 2, 5, 7, 0, 5, 3, 3, 0, 9, 0, 2, 1, 6, 8, 3, 9, 0, 2, 7},
    {4, 4, 9, 6, 6, 8, 1, 5, 4, 7, 9, 4, 4, 0, 8, 8, 7, 9, 4, 4},
    {1, 3, 6, 5, 0, 9, 0, 2, 9, 2, 5, 5, 7, 6, 6, 2, 9, 0, 0, 2},
    {0, 1, 8, 3, 4, 7, 9, 4, 1, 3, 0, 6, 6, 3, 5, 3, 2, 1, 3, 8},
    {5, 9, 5, 1, 8, 2, 9, 0, 7, 6, 3, 2, 7, 6, 3, 5, 3, 3, 6, 5},
    {0, 1, 4, 2, 4, 8, 5, 3, 7, 1, 2, 6, 1, 6, 1, 8, 1, 5, 4, 7},
    {5, 8, 0, 4, 8, 6, 7, 6, 4, 9, 0, 2, 0, 9, 0, 9, 5, 2, 8, 5},
    {6, 8, 3, 0, 4, 2, 5, 4, 2, 7, 9, 4, 7, 4, 2, 4, 8, 4, 9, 5},
    {6, 5, 3, 3, 8, 6, 6, 8, 0, 2, 9, 0, 6, 0, 4, 9, 0, 9, 5, 2},
    {8, 1, 0, 3, 3, 5, 0, 9, 9, 5, 2, 7, 5, 2, 0, 4, 2, 4, 8, 1},
    {9, 9, 8, 3, 6, 3, 4, 7, 4, 7, 7, 8, 4, 4, 7, 0, 4, 8, 6, 4},
    {2, 0, 5, 3, 6, 1, 8, 2, 1, 3, 6, 3, 7, 0, 6, 2, 0, 1, 8, 4},
    {2, 6, 8, 1, 9, 0, 2, 0, 1, 8, 0, 5, 9, 9, 8, 4, 7, 0, 4, 5},
    {3, 0, 9, 0, 7, 9, 4, 7, 0, 4, 5, 4, 2, 0, 5, 0, 6, 0, 0, 2},
    {6, 8, 0, 9, 2, 9, 0, 6, 0, 0, 1, 8, 8, 4, 3, 9, 8, 3, 0, 9},
    {1, 7, 9, 4, 9, 7, 7, 5, 3, 0, 8, 7, 9, 8, 1, 0, 5, 3, 3, 6},
    {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9},
    {1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0},
    {2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1},
    {3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2},
    {4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3},
    {5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4},
    {6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5},
    {7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6},
    {8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7},
    {9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8},
    {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9},
    {1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0},
    {2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1},
    {3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2},
    {4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3},
    {5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4},
    {6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5},
    {7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6},
    {8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7},
    {9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8},
    {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9},
    {5, 9, 5, 2, 6, 3, 7, 9, 5, 8, 7, 0, 8, 9, 0, 3, 4, 8, 2, 1},
    {2, 4, 5, 7, 8, 3, 0, 6, 1, 3, 6, 3, 3, 1, 1, 4, 0, 2, 7, 6},
    {4, 9, 9, 3, 0, 1, 3, 0, 6, 6, 6, 4, 5, 0, 9, 0, 2, 6, 2, 7},
    {8, 5, 6, 2, 6, 1, 4, 6, 5, 8, 1, 9, 6, 1, 5, 4, 0, 3, 3, 1},
    {6, 9, 4, 0, 0, 0, 2, 6, 3, 6, 6, 3, 9, 2, 4, 6, 8, 1, 3, 4},
    {1, 8, 5, 4, 0, 3, 8, 6, 3, 5, 8, 9, 4, 9, 4, 0, 2, 4, 0, 9},
    {0, 7, 6, 4, 1, 7, 0, 5, 1, 9, 1, 8, 8, 0, 6, 1, 9, 8, 0, 6},
    {1, 8, 4, 2, 4, 0, 2, 5, 7, 2, 5, 9, 9, 0, 5, 3, 3, 0, 8, 1},
    {6, 6, 1, 2, 6, 1, 8, 9, 6, 7, 2, 0, 4, 6, 5, 9, 7, 6, 6, 9},
    {8, 3, 4, 1, 7, 9, 4, 0, 3, 0, 1, 1, 3, 6, 5, 2, 4, 8, 6, 7},
    {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9},
    {1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0},
    {2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1},
    {3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2},
    {4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3},
    {5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4},
    {6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5},
    {7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6},
    {8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7},
    {9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8},
    {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9},
    {5, 9, 5, 2, 6, 3, 7, 9, 5, 5, 8, 7, 0, 8, 9, 0, 3, 4, 8, 2},
    {5, 9, 7, 0, 5, 3, 3, 3, 2, 0, 6, 5, 5, 0, 1, 0, 1, 8, 3, 4},
    {7, 5, 6, 6, 8, 1, 5, 3, 6, 5, 8, 7, 2, 5, 5, 5, 9, 5, 1, 8},
    {2, 2, 5, 0, 9, 0, 2, 1, 2, 5, 5, 9, 4, 1, 4, 0, 1, 4, 2, 4},
    {8, 6, 3, 4, 7, 9, 4, 7, 9, 4, 0, 3, 0, 6, 2, 6, 5, 8, 4, 8},
    {7, 0, 1, 0, 7, 6, 0, 9, 6, 3, 2, 3, 2, 5, 7, 6, 8, 3, 0, 4},
    {4, 7, 1, 2, 3, 3, 2, 5, 4, 3, 2, 5, 8, 0, 9, 0, 9, 6, 9, 0},
    {0, 2, 8, 6, 5, 3, 5, 4, 0, 3, 1, 2, 0, 7, 8, 3, 9, 7, 0, 4},
    {8, 4, 3, 0, 7, 6, 3, 2, 0, 6, 0, 7, 3, 0, 9, 8, 3, 0, 3, 7},
    {5, 6, 2, 3, 3, 2, 6, 8, 8, 8, 5, 0, 7, 0, 5, 3, 3, 3, 3, 7},
    {7, 1, 4, 3, 2, 2, 9, 2, 5, 5, 8, 9, 2, 6, 6, 8, 1, 5, 1, 9},
    {5, 4, 9, 9, 3, 0, 1, 3, 0, 6, 6, 6, 4, 5, 0, 9, 0, 2, 6, 2},
    {5, 1, 7, 8, 0, 0, 7, 6, 3, 2, 7, 2, 4, 3, 4, 7, 9, 4, 8, 1},
    {2, 8, 0, 9, 5, 2, 3, 3, 2, 6, 1, 1, 8, 1, 8, 2, 9, 0, 6, 9},
    {1, 5, 7, 6, 3, 2, 7, 0, 1, 1, 3, 9, 8, 3, 8, 6, 0, 6, 4, 0},
    {4, 9, 3, 3, 2, 6, 1, 3, 1, 4, 1, 7, 7, 8, 4, 3, 1, 0, 6, 0},
    {4, 0, 3, 0, 1, 1, 3, 5, 0, 6, 1, 1, 4, 2, 4, 8, 5, 3, 7, 1},
    {5, 5, 3, 5, 0, 9, 0, 2, 4, 5, 5, 8, 0, 4, 8, 6, 7, 6, 4, 4},
    {2, 0, 4, 3, 4, 7, 9, 4, 2, 8, 7, 8, 3, 0, 4, 2, 5, 4, 2, 6},
    {4, 9, 1, 8, 2, 9, 0, 8, 1, 7, 5, 3, 3, 3, 4, 9, 1, 0, 9, 7},
    {6, 2, 4, 5, 7, 8, 3, 0, 6, 1, 3, 6, 3, 3, 1, 1, 4, 0, 2, 7},
    {6, 1, 9, 9, 0, 2, 0, 5, 0, 5, 5, 1, 0, 0, 1, 8, 3, 4, 2, 9},
    {1, 9, 0, 7, 9, 4, 7, 7, 3, 7, 7, 2, 5, 5, 5, 9, 1, 5, 8, 6},
    {2, 6, 6, 2, 9, 0, 6, 6, 3, 6, 9, 4, 1, 4, 0, 1, 4, 2, 4, 2},
    {4, 3, 0, 5, 2, 7, 5, 5, 3, 3, 2, 6, 7, 3, 5, 8, 3, 2, 7, 8},
    {2, 5, 1, 4, 2, 4, 8, 5, 3, 7, 1, 2, 5, 7, 6, 8, 5, 3, 3, 5},
    {1, 7, 8, 0, 4, 8, 6, 7, 6, 4, 4, 2, 5, 0, 0, 5, 8, 1, 5, 8},
    {6, 9, 0, 2, 0, 1, 8, 0, 5, 2, 6, 1, 6, 7, 6, 8, 9, 0, 2, 9},
    {1, 7, 9, 4, 7, 0, 4, 5, 1, 1, 3, 5, 0, 6, 1, 1, 4, 9, 4, 0},
    {8, 2, 9, 0, 6, 0, 0, 1, 0, 9, 0, 2, 4, 5, 5, 8, 0, 9, 0, 6},
    {9, 8, 0, 9, 8, 3, 0, 7, 7, 5, 6, 6, 3, 6, 7, 0, 8, 2, 3, 0},
    {6, 4, 7, 0, 5, 3, 3, 1, 1, 1, 3, 5, 0, 6, 1, 1, 4, 7, 6, 5},
    {7, 8, 6, 6, 8, 1, 5, 1, 0, 9, 0, 2, 4, 5, 5, 8, 0, 5, 4, 6},
    {2, 2, 5, 0, 9, 0, 2, 1, 0, 6, 1, 3, 1, 6, 3, 4, 6, 6, 8, 1},
    {0, 0, 3, 1, 1, 3, 5, 0, 6, 1, 1, 4, 5, 6, 1, 8, 5, 0, 9, 8},
    {4, 6, 1, 0, 9, 0, 2, 4, 5, 5, 8, 0, 5, 3, 7, 1, 3, 4, 7, 2},
    {6, 1, 1, 4, 0, 1, 4, 8, 0, 4, 8, 6, 7, 6, 4, 4, 1, 8, 2, 1},
    {5, 5, 8, 0, 7, 0, 6, 8, 3, 0, 4, 2, 5, 4, 2, 6, 7, 1, 4, 5},
    {9, 2, 3, 3, 8, 4, 5, 5, 3, 3, 3, 4, 9, 1, 0, 9, 0, 5, 3, 6},
    {7, 6, 9, 4, 0, 0, 0, 2, 6, 3, 6, 6, 3, 9, 2, 4, 6, 8, 1, 3},
    {6, 6, 7, 6, 3, 5, 7, 7, 4, 1, 8, 4, 7, 5, 2, 3, 0, 9, 0, 0},
    {6, 2, 4, 5, 7, 8, 3, 0, 6, 1, 3, 6, 3, 3, 1, 1, 4, 0, 2, 7}
};

    private List<int> results = new List<int>();
    private int correctAnswers = 0;

    [SerializeField] GameObject informationToContinue;
    [SerializeField] GameObject finishScreen;

    [SerializeField] TMP_Text equationText;
    [SerializeField] TMP_Text resultText1;
    [SerializeField] TMP_Text resultText2;

    void Start()
    {
        //Debug Only
        //StartCoroutine(WaitForResultsManager());

        //Deactivate windows in case they are still active
        finishScreen.SetActive(false);
        informationToContinue.SetActive(false);

        StartCoroutine(StartTask());
    }


    /// <summary>
    /// Get the two numbers according to MAT05 rules. Display them accordingly and calculate result to check result later.
    /// </summary>
    /// <returns>Waits for a number input</returns>
    private IEnumerator StartTask()
    {
        int rows = matrix.GetLength(0); 
        int cols = matrix.GetLength(1);

        while (CountdownManager.Instance.RemainingTime > 1)
        {
            // Start the nested loop (iterate over columns and rows)
            for (int col = 0; col < cols; col++)  // Start from the top-left corner, moving right
            {
                for (int row = 0; row < rows - 1; row++)  // For each column, calculate down the rows
                {
                    int top = matrix[row, col];
                    int bottom = matrix[row + 1, col];
                    int result = (top + bottom) % 10;  // Keep only the last digit of the result

                    // Display the equation on the UI text
                    equationText.text = $"{top} + {bottom}";

                    // Wait for the user to press a key on the numpad
                    yield return StartCoroutine(WaitForNumPadKeyPress(result));  // Pass the expected result to compare

                }
            }
        }
    }


    /// <summary>
    /// Will wait for a numpad key press and compare it to the expected result
    /// </summary>
    /// <param name="expectedResult"></param>
    /// <returns></returns>
    private IEnumerator WaitForNumPadKeyPress(int expectedResult)
    {
        int pressedKey = -1;

        // Wait until a numpad key is pressed
        while (pressedKey == -1)
        {
            if (CountdownManager.Instance.RemainingTime <= 0)
            {
                //Debug only.
                //yield return StartCoroutine(WaitForSpace());
                PauseAndSaveResults();
            }
            for (int i = 0; i <= 9; i++)
            {
                if (Input.GetKeyDown(KeyCode.Keypad0 + i))
                {
                    pressedKey = i;  // Store the pressed key value
                    break;  // Exit the loop once a valid key is pressed
                }
            }
            yield return null;  // Wait for the next frame
        }

        // After a key is pressed, compare it with the result
        if (pressedKey == expectedResult)
        {
            correctAnswers++;
        }
    }

    /// <summary>
    /// Every 3 minutes, check if 1 hour has passed. If not, save the result step and start a new one.
    /// </summary>
    private void PauseAndSaveResults()
    {
        if (CountdownManager.Instance.TotalTime == 3600)
        {
            results.Add(correctAnswers);
            correctAnswers = 0;
            FinishTask();
        }
        else
        {
            results.Add(correctAnswers);
            correctAnswers = 0;
            CountdownManager.Instance.StartCountdown();
        }
    }

    private void FinishTask()
    {
        StopAllCoroutines();
        finishScreen.SetActive(true);
        ResultsManager.Instance.Results = results;
    }

    #region Debug 
    //private IEnumerator WaitForResultsManager()
    //{
    //    yield return new WaitForEndOfFrame();

    //    if (ResultsManager.Instance != null && ResultsManager.Instance.Skipped)
    //    {
    //        for (int i = 0; i < 20; i++)
    //        {
    //            int randomNumber = Random.Range(101, 141);
    //            results.Add(randomNumber);
    //        }
    //        FinishTask();

    //        yield return null;
    //    }

    //    StartCoroutine(WaitForResultsManager());
    //}

    //private IEnumerator WaitForSpace()
    //{
    //    PauseAndSaveResults();

    //    int pressedKey = -1;

    //    // Wait until a space key is pressed
    //    while (pressedKey == -1)
    //    {
    //        if (CountdownManager.Instance.TotalTime == 3600)
    //        {
    //            FinishTask();
    //        }
    //        if (Input.GetKeyDown(KeyCode.Space))
    //        {
    //            pressedKey = 1;  // Store the pressed key value
    //            informationToContinue.SetActive(false);
    //            equationText.gameObject.SetActive(true);
    //            CountdownManager.Instance.StartCountdown();
    //            break;  // Exit the loop once a valid key is pressed
    //        }
    //        yield return null;  // Wait for the next frame
    //    }
    //}
    #endregion
}
